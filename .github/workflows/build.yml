name: Build and Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
      
      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: 安装 pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false
      
      - name: 获取 pnpm store 目录
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT
      
      - name: 设置 pnpm 缓存
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      
      - name: 安装依赖
        run: pnpm install --frozen-lockfile
      
      - name: 构建应用
        run: pnpm run build
      
      - name: 打包应用 (macOS)
        if: matrix.os == 'macos-latest'
        run: pnpm run package:mac
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 打包应用 (Windows)
        if: matrix.os == 'windows-latest'
        run: pnpm run package:win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 打包应用 (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: pnpm run package:linux
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 上传构建产物 (macOS)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: VideoTool-macOS
          path: |
            release/*.dmg
            release/*.zip
            release/mac/*.app
          if-no-files-found: warn
      
      - name: 上传构建产物 (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: VideoTool-Windows
          path: |
            release/*.exe
            release/*.msi
          if-no-files-found: warn
      
      - name: 上传构建产物 (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: VideoTool-Linux
          path: |
            release/*.AppImage
            release/*.deb
            release/*.rpm
          if-no-files-found: warn
  
  release:
    name: 创建 Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
      
      - name: 下载所有构建产物
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: VideoTool-*
          merge-multiple: false
      
      - name: 显示构建产物
        run: ls -R artifacts
      
      - name: 创建 Release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            artifacts/**/*.dmg
            artifacts/**/*.zip
            artifacts/**/*.exe
            artifacts/**/*.msi
            artifacts/**/*.AppImage
            artifacts/**/*.deb
            artifacts/**/*.rpm
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 配置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: 配置 pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: 获取 pnpm 缓存目录
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_OUTPUT
      
      - name: 设置 pnpm 缓存
        uses: actions/cache@v4
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 安装依赖
        run: pnpm install --frozen-lockfile

      - name: 下载 FFmpeg (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          echo "=== 下载 FFmpeg for macOS (Universal Binary) ==="
          mkdir -p resources/ffmpeg/mac
          cd resources/ffmpeg/mac
          
          # 下载 FFmpeg Universal Binary（同时支持 arm64 和 x64）
          echo "下载 FFmpeg (Universal Binary)..."
          curl -L -o ffmpeg.zip "https://evermeet.cx/ffmpeg/getrelease/ffmpeg/zip"
          unzip -o ffmpeg.zip
          rm ffmpeg.zip
          
          echo "下载 FFprobe (Universal Binary)..."
          curl -L -o ffprobe.zip "https://evermeet.cx/ffmpeg/getrelease/ffprobe/zip"
          unzip -o ffprobe.zip
          rm ffprobe.zip
          
          # 设置执行权限
          chmod +x ffmpeg ffprobe
          
          # 验证架构（应该显示 arm64 和 x86_64）
          echo "=== 验证 FFmpeg 架构 ==="
          ls -lh
          echo "FFmpeg 架构:"
          lipo -info ffmpeg || file ffmpeg
          echo "FFprobe 架构:"
          lipo -info ffprobe || file ffprobe
          
          # 测试运行
          ./ffmpeg -version | head -1
          ./ffprobe -version | head -1
          
          cd ../../..
          echo "✅ FFmpeg Universal Binary 下载完成"

      - name: 下载 FFmpeg (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Write-Host "=== 下载 FFmpeg for Windows ==="
          $url = "https://www.gyan.dev/ffmpeg/builds/ffmpeg-release-essentials.zip"
          $output = "$env:TEMP\ffmpeg.zip"
          Write-Host "下载中..."
          Invoke-WebRequest -Uri $url -OutFile $output
          Write-Host "解压中..."
          Expand-Archive -Path $output -DestinationPath "$env:TEMP\ffmpeg" -Force
          $ffmpegDir = Get-ChildItem -Path "$env:TEMP\ffmpeg" -Directory | Select-Object -First 1
          Write-Host "找到 FFmpeg 目录: $($ffmpegDir.FullName)"
          New-Item -ItemType Directory -Force -Path "resources\ffmpeg\win"
          Copy-Item "$($ffmpegDir.FullName)\bin\ffmpeg.exe" "resources\ffmpeg\win\"
          Copy-Item "$($ffmpegDir.FullName)\bin\ffprobe.exe" "resources\ffmpeg\win\"
          Get-ChildItem -Path "resources\ffmpeg\win\" | ForEach-Object { Write-Host "$($_.Name): $([math]::Round($_.Length / 1MB, 2)) MB" }

      - name: 构建应用
        run: pnpm build
      
      - name: 检查构建输出
        shell: bash
        run: |
          echo "=== 检查 dist 目录结构 ==="
          find dist -type f -name "*.js" | head -20
          echo "=== 检查入口文件 ==="
          ls -la dist/main/main/index.js || echo "入口文件不存在"

      - name: 打包应用 (macOS)
        if: runner.os == 'macOS'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CSC_IDENTITY_AUTO: 'true'
        run: pnpm run build:mac

      - name: 打包应用 (Windows)
        if: runner.os == 'Windows'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: pnpm run build:win

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: VideoTool-${{ runner.os }}
          path: release/
          if-no-files-found: warn

  publish:
    name: 发布版本
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: 下载所有构建产物
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: VideoTool-*
          merge-multiple: false

      - name: 显示构建产物
        run: ls -R artifacts || true

      - name: 创建并上传 GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            artifacts/VideoTool-macOS/**/*.dmg
            artifacts/VideoTool-Windows/**/VideoTool Setup*.exe
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


